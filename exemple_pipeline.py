#!/usr/bin/env python3
"""
Script d'exemple pour d√©montrer l'utilisation compl√®te du pipeline
d'analyse de sentiment d'actualit√©s multilingue.

Ce script ex√©cute automatiquement toutes les √©tapes du pipeline :
1. Collecte d'actualit√©s via NewsAPI
2. Analyse de sentiment multilingue  
3. Traduction automatique vers le fran√ßais
4. G√©n√©ration de rapport d'analyse

Usage:
    python exemple_pipeline.py
    
    ou avec param√®tres personnalis√©s :
    
    python exemple_pipeline.py --query "machine learning" --days 14 --max-results 20
"""

import subprocess
import sys
import os
from datetime import datetime, timedelta
import argparse


def run_command(command, description):
    """
    Ex√©cute une commande syst√®me avec gestion d'erreurs.
    
    Args:
        command (list): Commande √† ex√©cuter (format subprocess)
        description (str): Description de l'√©tape pour l'utilisateur
    
    Returns:
        bool: True si succ√®s, False sinon
    """
    print(f"\n{'='*60}")
    print(f"üîÑ {description}")
    print(f"{'='*60}")
    print(f"Commande: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} termin√©e avec succ√®s")
        if result.stdout:
            print("Sortie:", result.stdout[-500:])  # Derni√®res 500 caract√®res
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description}")
        print(f"Code d'erreur: {e.returncode}")
        if e.stderr:
            print(f"Erreur: {e.stderr}")
        return False
    except FileNotFoundError:
        print(f"‚ùå Fichier Python non trouv√© pour {description}")
        print("V√©rifiez que vous √™tes dans le bon r√©pertoire")
        return False


def check_prerequisites():
    """
    V√©rifie les pr√©requis avant l'ex√©cution du pipeline.
    
    Returns:
        bool: True si tous les pr√©requis sont satisfaits
    """
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rification des fichiers Python
    required_files = [
        "1_search_tools.py",
        "2_analyse_sentiments.py", 
        "3_traduction.py",
        "4_analyse_fichier.py"
    ]
    
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå Fichier manquant: {file}")
            return False
    
    # V√©rification de la cl√© API
    if not os.path.exists(".env"):
        print("‚ùå Fichier .env manquant")
        print("üí° Copiez .env.example vers .env et ajoutez votre cl√© NewsAPI")
        return False
    
    # V√©rification des d√©pendances Python (basique)
    try:
        import requests
        import transformers
        import torch
        import tqdm
    except ImportError as e:
        print(f"‚ùå D√©pendance Python manquante: {e}")
        print("üí° Ex√©cutez: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Tous les pr√©requis sont satisfaits")
    return True


def main():
    """
    Fonction principale qui orchestre l'ex√©cution du pipeline complet.
    """
    parser = argparse.ArgumentParser(
        description="Exemple d'ex√©cution compl√®te du pipeline d'analyse de sentiment"
    )
    parser.add_argument(
        "--query", 
        default="intelligence artificielle",
        help="Terme de recherche pour les actualit√©s (d√©faut: 'intelligence artificielle')"
    )
    parser.add_argument(
        "--days", 
        type=int, 
        default=7,
        help="Nombre de jours depuis aujourd'hui pour la recherche (d√©faut: 7)"
    )
    parser.add_argument(
        "--max-results", 
        type=int, 
        default=10,
        help="Nombre maximum d'articles √† r√©cup√©rer (d√©faut: 10)"
    )
    parser.add_argument(
        "--skip-collection",
        action="store_true",
        help="Ignorer la collecte d'actualit√©s (utiliser les fichiers existants)"
    )
    
    args = parser.parse_args()
    
    print("üöÄ PIPELINE D'ANALYSE DE SENTIMENT D'ACTUALIT√âS")
    print("=" * 60)
    print(f"Requ√™te: {args.query}")
    print(f"P√©riode: {args.days} derniers jours")
    print(f"Max articles: {args.max_results}")
    
    # V√©rification des pr√©requis
    if not check_prerequisites():
        print("\n‚ùå Impossible de continuer. R√©solvez les probl√®mes ci-dessus.")
        sys.exit(1)
    
    # Calcul de la date de d√©but
    from_date = (datetime.now() - timedelta(days=args.days)).strftime("%Y-%m-%d")
    
    success = True
    
    # √âtape 1: Collecte d'actualit√©s
    if not args.skip_collection:
        command = [
            sys.executable, "1_search_tools.py",
            args.query,
            "--from-date", from_date,
            "--max-results", str(args.max_results)
        ]
        success &= run_command(command, "√âtape 1: Collecte d'actualit√©s via NewsAPI")
    else:
        print("\n‚è≠Ô∏è  √âtape 1 ignor√©e: Collecte d'actualit√©s")
    
    if not success:
        print("\n‚ùå Arr√™t du pipeline √† l'√©tape 1")
        sys.exit(1)
    
    # √âtape 2: Analyse de sentiment
    command = [sys.executable, "2_analyse_sentiments.py"]
    success &= run_command(command, "√âtape 2: Analyse de sentiment multilingue")
    
    if not success:
        print("\n‚ùå Arr√™t du pipeline √† l'√©tape 2")
        sys.exit(1)
    
    # √âtape 3: Traduction automatique
    command = [sys.executable, "3_traduction.py"]
    success &= run_command(command, "√âtape 3: Traduction automatique vers le fran√ßais")
    
    if not success:
        print("\n‚ùå Arr√™t du pipeline √† l'√©tape 3")
        sys.exit(1)
    
    # √âtape 4: G√©n√©ration de rapport
    command = [sys.executable, "4_analyse_fichier.py", "resultats_sentiments_corpus_traduit.json"]
    success &= run_command(command, "√âtape 4: G√©n√©ration du rapport d'analyse")
    
    if success:
        print(f"\n{'='*60}")
        print("üéâ PIPELINE TERMIN√â AVEC SUCC√àS!")
        print(f"{'='*60}")
        print("\nüìÅ Fichiers g√©n√©r√©s:")
        print("  ‚Ä¢ resultats_news.txt - Articles collect√©s")
        print("  ‚Ä¢ corpus_concatene.txt - Tous les titres extraits")
        print("  ‚Ä¢ resultats_sentiments_corpus.json - Analyse de sentiment")
        print("  ‚Ä¢ resultats_sentiments_corpus_traduit.json - Avec traductions")
        print("\nüí° Conseils pour la suite:")
        print("  ‚Ä¢ Examinez le rapport d'analyse affich√© ci-dessus")
        print("  ‚Ä¢ V√©rifiez manuellement quelques classifications")
        print("  ‚Ä¢ Comparez avec d'autres p√©riodes ou requ√™tes")
        print("  ‚Ä¢ Utilisez les donn√©es JSON pour des analyses personnalis√©es")
    else:
        print(f"\n{'='*60}")
        print("‚ùå PIPELINE INTERROMPU")
        print(f"{'='*60}")
        print("Des erreurs sont survenues. V√©rifiez les messages ci-dessus.")
        sys.exit(1)


if __name__ == "__main__":
    main()
